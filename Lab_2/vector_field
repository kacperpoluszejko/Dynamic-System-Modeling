import numpy as np
import matplotlib.pyplot as plt

# ===== Układ =====
def f(x, y):   # dx/dt
    return x * (y - 1)

def g(x, y):   # dy/dt
    return 3*x - 2*y + x**2 - 2*y**2

# ===== Siatka =====
x = np.linspace(-4.5, 3.0, 41)
y = np.linspace(-3.0, 2.0, 41)
X, Y = np.meshgrid(x, y)

U = f(X, Y)
V = g(X, Y)

# Normalizacja (bez NaN w miejscach U=V=0)
N = np.hypot(U, V)
N[N == 0] = 1.0
U_n = U / N
V_n = V / N

fig, ax = plt.subplots(figsize=(7.5, 6.5))

# ===== Portret fazowy =====
#ax.streamplot(X, Y, U, V, density=4, linewidth=0.8, arrowsize=1.0, minlength=0.3)
ax.quiver(X, Y, U_n, V_n,
          angles='xy', scale_units='xy', scale=6,   # spróbuj 20–60
          width=0.002, color='0.5')


# ===== Izokliny zerowego wzrostu =====
# f=0: x=0  lub  y=1
ax.axvline(0, color='tab:green', linestyle='-', linewidth=1.2, label='f=0')
ax.axhline(1, color='tab:green', linestyle='-', linewidth=1.2)

# g=0: 3x - 2y + x^2 - 2y^2 = 0  ->  2y^2 + 2y = x^2 + 3x
xx = np.linspace(-4.5, 3.0, 800)
disc = 1 + 2*xx**2 + 6*xx                   # Δ = 1 + 2x^2 + 6x  (musi być ≥ 0)
mask = disc >= 0
yy_plus  = (-1 + np.sqrt(disc[mask]))/2     # gałąź „+”
yy_minus = (-1 - np.sqrt(disc[mask]))/2     # gałąź „-”
ax.plot(xx[mask], yy_plus,  color='tab:red',  linewidth=1.5, label='g=0')
ax.plot(xx[mask], yy_minus, color='tab:red',  linewidth=1.5)

# ===== Punkty stałe = przecięcia f=0 i g=0 =====
fixed = [(0, 0), (0, -1), (1, 1), (-4, 1)]
ax.scatter(*zip(*fixed), s=60, c='k', zorder=5, label='punkty stałe')

ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_xlim(x.min(), x.max())
ax.set_ylim(y.min(), y.max())
ax.set_aspect('equal', adjustable='box')
ax.grid(True, alpha=0.3)
ax.legend(loc='upper left', framealpha=0.9)
ax.set_title('Portret fazowy z izoklinami f=0 i g=0')
plt.tight_layout()
plt.savefig("Wektorowy.png")
plt.show()




# # ===== Nulkliny (dx/dt=0, dy/dt=0) =====
# x_line = np.linspace(-0.5, 3.0, 400)
# plt.plot(x_line, np.ones_like(x_line), 'r--', label='y=1 (dx/dt=0)')
# plt.plot(np.ones_like(x_line), x_line, 'b--', label='x=1 (dy/dt=0)')
# plt.axhline(0, color='black', linewidth=0.8)
# plt.axvline(0, color='black', linewidth=0.8)

# # ===== Punkty równowagi =====
# eq_points = np.array([[0,0], [1,0], [0,1], [1,1]])
# plt.scatter(eq_points[:,0], eq_points[:,1], color='red', s=60, zorder=5)

# # ===== Opis wykresu =====
# plt.xlabel("x")
# plt.ylabel("y")
# plt.title("Pole wektorowe układu:\n dx/dt = x(1 - y),  dy/dt = y(x - 1)")
# plt.legend()
# plt.grid(True)
# plt.xlim(-0.5, 3)
# plt.ylim(-0.5, 3)
# plt.show()
